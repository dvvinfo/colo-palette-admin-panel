import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { transactionsApi } from '@/services/api'
import type { Transaction, TransactionFilters } from '@/types'

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
function generateMockTransactions(): Transaction[] {
  const currencies = ['btc', 'eth', 'usdt', 'rub']
  const statuses: Transaction['status'][] = ['pending', 'completed', 'failed', 'cancelled', 'success', 'progress', 'rejected']
  const usernames = ['admin', 'player1', 'vip_user', 'newbie', 'gambler', 'lucky_one', 'test_user']

  const transactions: Transaction[] = []

  for (let i = 1; i <= 50; i++) {
    const currency = currencies[Math.floor(Math.random() * currencies.length)]
    const status = statuses[Math.floor(Math.random() * statuses.length)]
    const username = usernames[Math.floor(Math.random() * usernames.length)]
    const userId = Math.floor(Math.random() * 100) + 1
    const amount_raw = Math.random() * 5 + 0.1
    const rate = currency === 'rub' ? 1 : Math.floor(Math.random() * 6000000) + 1000000
    const amount_rub = currency === 'rub' ? amount_raw : amount_raw * rate

    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π
    const createdAt = new Date()
    createdAt.setDate(createdAt.getDate() - Math.floor(Math.random() * 30))

    transactions.push({
      id: i,
      user_id: userId,
      currency,
      amount_raw,
      rate,
      amount_rub,
      status,
      created_at: createdAt.toISOString(),
      user: {
        id: userId,
        username,
        email: `${username}@example.com`,
        role_id: 2,
        provider: '',
        provider_id: '',
        balance: Math.floor(Math.random() * 5000000) + 100000,
        created_at: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
        updated_at: new Date().toISOString(),
        role: {
          id: 2,
          name: 'user',
          permissions: null
        }
      }
    })
  }

  return transactions.sort((a, b) =>
    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
  )
}

export const useTransactionsStore = defineStore('transactions', () => {
  const transactions = ref<Transaction[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)
  const currentPage = ref(1)
  const totalPages = ref(1)

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
  const statistics = computed(() => {
    const stats = {
      deposits: { count: 0, amount: 0 },
      withdrawals: { count: 0, amount: 0 },
      pending: { count: 0, amount: 0 },
      totalTurnover: 0
    }

    transactions.value.forEach(transaction => {
      // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º amount_rub –≤–º–µ—Å—Ç–æ amount
      const amount = transaction.amount_rub

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      if (transaction.status === 'success' || transaction.status === 'completed') {
        stats.deposits.count++
        stats.deposits.amount += amount
        stats.totalTurnover += amount
      }

      if (transaction.status === 'pending' || transaction.status === 'progress') {
        stats.pending.count++
        stats.pending.amount += amount
      }
    })

    return stats
  })

  async function fetchTransactions(filters?: TransactionFilters) {
    loading.value = true
    error.value = null

    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters)

    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...')
      const response = await transactionsApi.getAll(filters)
      console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.data)

      transactions.value = response.data.data
      currentPage.value = response.data.page
      totalPages.value = response.data.pages

      console.log('üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ store:', {
        transactionsCount: transactions.value.length,
        currentPage: currentPage.value,
        totalPages: totalPages.value
      })
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error'
      console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫-–¥–∞–Ω–Ω—ã–µ:', errorMessage)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
      const mockData = generateMockTransactions()
      console.log('üî® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ:', mockData.length, '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ –º–æ–∫-–¥–∞–Ω–Ω—ã–º
      let filtered = mockData
      if (filters?.query) {
        const query = filters.query.toLowerCase()
        filtered = filtered.filter(t =>
          t.user?.username?.toLowerCase().includes(query) ||
          t.user?.email?.toLowerCase().includes(query) ||
          t.id.toString().includes(query)
        )
        console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É:', query, '‚Üí', filtered.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
      }
      if (filters?.status) {
        filtered = filtered.filter(t => t.status === filters.status)
        console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:', filters.status, '‚Üí', filtered.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
      }

      // –ü—Ä–æ—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
      const page = filters?.page || 1
      const perPage = 20
      const startIndex = (page - 1) * perPage
      const endIndex = startIndex + perPage

      transactions.value = filtered.slice(startIndex, endIndex)
      currentPage.value = page
      totalPages.value = Math.ceil(filtered.length / perPage)
      error.value = null

      console.log('üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', {
        —Å—Ç—Ä–∞–Ω–∏—Ü–∞: page,
        —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π–ù–∞–°—Ç—Ä–∞–Ω–∏—Ü–µ: transactions.value.length,
        –≤—Å–µ–≥–æ–°—Ç—Ä–∞–Ω–∏—Ü: totalPages.value
      })
    } finally {
      loading.value = false
      console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    }
  }

  async function updateTransactionStatus(id: number, status: Transaction['status']) {
    try {
      await transactionsApi.updateStatus(id, status)
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const transaction = transactions.value.find(t => t.id === id)
      if (transaction) {
        transaction.status = status
      }
      return true
    } catch {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ')
      // –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const transaction = transactions.value.find(t => t.id === id)
      if (transaction) {
        transaction.status = status
      }
      return true
    }
  }

  async function fetchUserTransactions(userId: number) {
    loading.value = true
    error.value = null

    try {
      const response = await transactionsApi.getUserTransactions(userId)
      return response.data
    } catch (err: unknown) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err instanceof Error ? err.message : 'Unknown error')
      // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const userTransactions = generateMockTransactions().filter(t => t.user_id === userId)
      return userTransactions
    } finally {
      loading.value = false
    }
  }

  return {
    transactions,
    loading,
    error,
    currentPage,
    totalPages,
    statistics,
    fetchTransactions,
    updateTransactionStatus,
    fetchUserTransactions
  }
})
